version: '3.8'

services:
  # # Database service
  # postgres:
  #   image: postgres:14-alpine
  #   container_name: microservices-postgres
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  #     POSTGRES_DB: ${POSTGRES_DB}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5

  # Authentication Service
  authen-service:
    build:
      context: .
      dockerfile: ./services/authen-service/Dockerfile
    container_name: authen-service
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    environment:
      SERVER_ENV: ${SERVER_ENV}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_SSL_MODE: ${DB_SSL_MODE}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION_HOURS: ${JWT_EXPIRATION_HOURS}
    ports:
      - "8082:${SERVER_PORT}"
    networks:
      - microservices-network

  # OAuth Service
  oauth-service:
    build:
      context: .
      dockerfile: ./services/oauth-service/Dockerfile
    container_name: oauth-service
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    environment:
      SERVER_ENV: ${SERVER_ENV}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      TOKEN_SECRET: ${TOKEN_SECRET}
      ACCESS_TOKEN_EXPIRATION_MINUTES: ${ACCESS_TOKEN_EXPIRATION_MINUTES}
      REFRESH_TOKEN_EXPIRATION_DAYS: ${REFRESH_TOKEN_EXPIRATION_DAYS}
    ports:
      - "8084:${SERVER_PORT}"
    networks:
      - microservices-network

  # Merchant Service
  merchant-service:
    build:
      context: .
      dockerfile: ./services/merchant-service/Dockerfile
    container_name: merchant-service
    depends_on:
      # - postgres
      - oauth-service
    environment:
      SERVER_ENV: ${SERVER_ENV}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      OAUTH_BASE_URL: ${OAUTH_BASE_URL}
      CLIENT_ID: ${MERCHANT_CLIENT_ID}
      CLIENT_SECRET: ${MERCHANT_CLIENT_SECRET}
    ports:
      - "8085:${SERVER_PORT}"
    networks:
      - microservices-network

  # Product Service
  product-service:
    build:
      context: .
      dockerfile: ./services/product-service/Dockerfile
    container_name: product-service
    depends_on:
      # - postgres
      - oauth-service
    environment:
      SERVER_ENV: ${SERVER_ENV}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      OAUTH_BASE_URL: ${OAUTH_BASE_URL}
      CLIENT_ID: ${PRODUCT_CLIENT_ID}
      CLIENT_SECRET: ${PRODUCT_CLIENT_SECRET}
      SUPPLIER_SERVICE_URL: ${SUPPLIER_SERVICE_URL}
    ports:
      - "8086:${SERVER_PORT}"
    networks:
      - microservices-network

  # Supplier Service
  supplier-service:
    build:
      context: .
      dockerfile: ./services/supplier-service/Dockerfile
    container_name: supplier-service
    depends_on:
      # - postgres
      - oauth-service
    environment:
      APP_ENV: ${APP_ENV}
      SERVER_PORT: ${SERVER_PORT}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      OAUTH_BASE_URL: ${OAUTH_BASE_URL}
      CLIENT_ID: ${SUPPLIER_CLIENT_ID}
      CLIENT_SECRET: ${SUPPLIER_CLIENT_SECRET}
    ports:
      - "8083:${SERVER_PORT}"
    networks:
      - microservices-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./Observability/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - microservices-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./Observability/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=${GF_USERS_ALLOW_SIGN_UP}
    networks:
      - microservices-network

  # Node Exporter for hardware and OS metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge

volumes:
  postgres_data:
  prometheus_data:
  grafana_data: